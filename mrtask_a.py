# MapReduce Tasks:
# Task 4. Write MapReduce codes to perform the tasks using the files youâ€™ve downloaded on your EMR Instance:
# a. Which vendors have the most trips, and what is the total revenue generated by that vendor?

from mrjob.job import MRJob # Importing mrjob library
from mrjob.step import MRStep  # Importing library to define multistep job

# Extending the MRJob class 
# This includes definition of map and reduce functions
class MostTrips_TotalRevenue(MRJob): 

    # Defining two step jobs
    def steps(self):
        return [
            MRStep(mapper=self.mapper, reducer=self.reducer),
            MRStep(reducer=self.final_reducer)
        ]
    # mapper function
    # Our mapper function takes a each record of file as an input 
    # Yielding the vendor_id and revenue as keys,value pair
    def mapper(self, _, line):  
        if not line.startswith('VendorID'): # skipping the header row
            data = line.split(',')
            vendor_id = data[0]
            revenue = float(data[16])
            yield vendor_id, revenue

    # reducer function
    #Produces value as sum of revenue for each unique vendor_id. Key is set as none for every pair.
    def reducer(self, key, values):
        yield None, (sum(values), key)
    
    # Final reducer function
    # Produces value as record having maximum value among list of total revenues per vendor_id. 
    # Key is the vendor_id who is having maximum total revenue.
    def final_reducer(self, _, values):
        max_revenue, vendor_id = max(values)
        yield vendor_id, max_revenue

# main function
if __name__ == '__main__': 
    MostTrips_TotalRevenue.run() # calling the run function